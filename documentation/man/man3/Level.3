.TH "Level" 3 "Vendredi 24 Avril 2015" "Starlight" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Level \- Modélise une carte telle qu'utilisée dans le jeu\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <level\&.hpp>\fP
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBLevel\fP (const double, const double)"
.br
.RI "\fIInstancie une carte de largeur et hauteur donnée\&. \fP"
.ti -1c
.RI "int \fBgetWidth\fP () const "
.br
.RI "\fIPermet d'obtenir la longueur du niveau\&. \fP"
.ti -1c
.RI "int \fBgetHeight\fP () const "
.br
.RI "\fIPermet d'obtenir la hauteur du niveau\&. \fP"
.ti -1c
.RI "\fBSource\fP & \fBgetSource\fP ()"
.br
.RI "\fIRetourne la source de la carte\&. \fP"
.ti -1c
.RI "void \fBsetSource\fP (const \fBSource\fP &)"
.br
.RI "\fIChange la source de la carte\&. \fP"
.ti -1c
.RI "const \fBDest\fP & \fBgetDestination\fP () const "
.br
.RI "\fIRetourne la destination de la carte\&. \fP"
.ti -1c
.RI "void \fBsetDestination\fP (const \fBDest\fP &)"
.br
.RI "\fIChange la destination de la carte\&. \fP"
.ti -1c
.RI "const std::vector< \fBWall\fP > & \fBgetWalls\fP () const "
.br
.RI "\fIRetourne l'ensemble des murs de la carte\&. \fP"
.ti -1c
.RI "void \fBaddWall\fP (const \fBWall\fP &)"
.br
.RI "\fIPermet d'ajouter un mur sur la carte\&. \fP"
.ti -1c
.RI "std::vector< \fBMirror\fP > & \fBgetMirrors\fP ()"
.br
.RI "\fIRetourne l'ensemble des miroirs de la carte\&. \fP"
.ti -1c
.RI "void \fBaddMirror\fP (\fBMirror\fP)"
.br
.RI "\fIPermet d'ajouter un miroir sur la carte\&. \fP"
.ti -1c
.RI "const std::vector< \fBCrystal\fP > & \fBgetCrystals\fP () const "
.br
.RI "\fIRetourne l'ensemble des cristaux de la carte\&. \fP"
.ti -1c
.RI "void \fBaddCrystal\fP (\fBCrystal\fP)"
.br
.RI "\fIPermet d'ajouter un cristal sur la carte\&. \fP"
.ti -1c
.RI "const std::vector< \fBLens\fP > & \fBgetLenses\fP () const "
.br
.RI "\fIRetourne l'ensemble des lentilles de la carte\&. \fP"
.ti -1c
.RI "void \fBaddLens\fP (\fBLens\fP)"
.br
.RI "\fIPermet d'ajouter une lentille sur la carte\&. \fP"
.ti -1c
.RI "std::vector< \fBRay\fP > & \fBgetRays\fP ()"
.br
.RI "\fIRetourne l'ensemble des rayons de la carte\&. \fP"
.ti -1c
.RI "void \fBsetRays\fP (const std::vector< \fBRay\fP > &)"
.br
.RI "\fIChange l'ensemble des rayons de la carte\&. \fP"
.ti -1c
.RI "const std::vector< \fBNuke\fP > & \fBgetNukes\fP () const "
.br
.RI "\fIRetourne l'ensemble des bombes de la carte\&. \fP"
.ti -1c
.RI "void \fBaddNuke\fP (const \fBNuke\fP &)"
.br
.RI "\fIPermet d'ajouter une bombe sur la carte\&. \fP"
.ti -1c
.RI "bool \fBthereIsAnExplodedNuke\fP () const "
.br
.RI "\fIRenseigne si une bombe a explosé\&. \fP"
.ti -1c
.RI "void \fBcomputeRay\fP (\fBRay\fP)"
.br
.RI "\fIPermet de calculer un rayon à partir du rayon entré en paramètre\&. \fP"
.ti -1c
.RI "void \fBcomputeRays\fP ()"
.br
.RI "\fICalcule les rayons lumineux de la carte\&. \fP"
.ti -1c
.RI "void \fBaddView\fP (\fBLevelView\fP *)"
.br
.RI "\fIPermet d'abonner une nouvelle vue au modèle\&. \fP"
.ti -1c
.RI "void \fBnotifyViews\fP ()"
.br
.RI "\fIPermet de notifier les vues abonnées au niveau que son état a changé\&. \fP"
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "std::map< \fBPoint\fP *, \fBElement\fP * > \fBgetEltsInTrajectory\fP (const \fBRay\fP &ray)"
.br
.RI "\fIPermet d'obtenir une map contenant les élément se trouvant sur la trajectoire du rayon, ayant pour clé; le point d'intersection avec cet élément\&. \fP"
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "const double \fBwidth\fP"
.br
.RI "\fILa largeur du niveau\&. \fP"
.ti -1c
.RI "const double \fBheight\fP"
.br
.RI "\fILa hauteur du niveau\&. \fP"
.ti -1c
.RI "\fBSource\fP \fBsource\fP {\fBPoint\fP{0, 0}, 10, 30\&., 400}"
.br
.RI "\fILa source du niveau\&. \fP"
.ti -1c
.RI "\fBDest\fP \fBdest\fP {\fBPoint\fP{0, 0}, 5}"
.br
.RI "\fILa destination du niveau\&. \fP"
.ti -1c
.RI "std::vector< \fBWall\fP > \fBwalls\fP"
.br
.RI "\fIL'ensemble des murs du niveau, qu'ils soient ceux qui le délimitent ou des murs supplémentaires ajoutés au niveau même\&. \fP"
.ti -1c
.RI "std::vector< \fBMirror\fP > \fBmirrors\fP"
.br
.RI "\fImirrors L'ensemble des miroirs présents dans le niveau\&. \fP"
.ti -1c
.RI "std::vector< \fBCrystal\fP > \fBcrystals\fP"
.br
.RI "\fIcrystals L'ensemble des cristaux présents dans le niveau\&. \fP"
.ti -1c
.RI "std::vector< \fBLens\fP > \fBlenses\fP"
.br
.RI "\fIlenses L'ensemble des lentilles présentes dans le niveau\&. \fP"
.ti -1c
.RI "std::vector< \fBRay\fP > \fBrays\fP"
.br
.RI "\fIrays L'ensemble des rayons créés dans le niveau quand la source est allumée\&. \fP"
.ti -1c
.RI "std::vector< \fBNuke\fP > \fBnukes\fP"
.br
.RI "\fInukes L'ensemble des bombes créées dans le niveau\&. \fP"
.ti -1c
.RI "std::vector< \fBLevelView\fP * > \fBviews\fP"
.br
.RI "\fIviews L'ensemble des vues qui observent le niveau\&. \fP"
.in -1c
.SH "Description détaillée"
.PP 
Modélise une carte telle qu'utilisée dans le jeu\&. 

Une carte est un ensemble de composant tels que des murs, des miroirs, etc\&. 
.PP
Définition à la ligne 27 du fichier level\&.hpp\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "Level::Level (const double, const double)"

.PP
Instancie une carte de largeur et hauteur donnée\&. Quand une carte est crée, quatre murs dénotant ses bords sont automatiquement ajoutés à la carte\&. 
.PP
La source et la destination sont initialisées à des valeurs par défaut inutilisables\&. Vous devez manuellement initialiser la source et la destination via les fonctions appropriées\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIw\fP la largeur de la carte 
.br
\fIh\fP la hauteur de la carte 
.RE
.PP

.SH "Documentation des fonctions membres"
.PP 
.SS "void Level::addCrystal (\fBCrystal\fP)"

.PP
Permet d'ajouter un cristal sur la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fInewCrystal\fP nouveau cristal à ajouter\&. 
.RE
.PP

.SS "void Level::addLens (\fBLens\fP)"

.PP
Permet d'ajouter une lentille sur la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fInewLens\fP nouvelle lentille à ajouter\&. 
.RE
.PP

.SS "void Level::addMirror (\fBMirror\fP)"

.PP
Permet d'ajouter un miroir sur la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fInewMirror\fP nouveau miroir à ajouter\&. 
.RE
.PP

.SS "void Level::addNuke (const \fBNuke\fP &)"

.PP
Permet d'ajouter une bombe sur la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fInewNuke\fP nouvelle bombe à ajouter\&. 
.RE
.PP

.SS "void Level::addView (\fBLevelView\fP *)"

.PP
Permet d'abonner une nouvelle vue au modèle\&. 
.PP
\fBParamètres:\fP
.RS 4
\fInewView\fP Nouvelle vue abonnée au niveau\&. 
.RE
.PP

.SS "void Level::addWall (const \fBWall\fP &)"

.PP
Permet d'ajouter un mur sur la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fInewWall\fP nouveau mur à ajouter\&. 
.RE
.PP

.SS "void Level::computeRay (\fBRay\fP)"

.PP
Permet de calculer un rayon à partir du rayon entré en paramètre\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIray\fP Rayon précèdent\&. 
.RE
.PP

.SS "void Level::computeRays ()"

.PP
Calcule les rayons lumineux de la carte\&. 
.SS "const std::vector< \fBCrystal\fP > & Level::getCrystals () const\fC [inline]\fP"

.PP
Retourne l'ensemble des cristaux de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
l'ensemble des cristaux de la carte 
.RE
.PP

.PP
Définition à la ligne 308 du fichier level\&.hpp\&.
.PP
Références crystals\&.
.PP
.nf
309 {
310     return this->crystals;
311 }
.fi
.SS "const \fBDest\fP & Level::getDestination () const\fC [inline]\fP"

.PP
Retourne la destination de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
la destination de la carte 
.RE
.PP

.PP
Définition à la ligne 293 du fichier level\&.hpp\&.
.PP
Références dest\&.
.PP
.nf
294 {
295     return this->dest;
296 }
.fi
.SS "std::map<\fBPoint\fP *, \fBElement\fP *> Level::getEltsInTrajectory (const \fBRay\fP & ray)\fC [private]\fP"

.PP
Permet d'obtenir une map contenant les élément se trouvant sur la trajectoire du rayon, ayant pour clé; le point d'intersection avec cet élément\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIray\fP Rayon dont on désire obtenir les éléments sur sa trajectoire\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Une map contenant les élément se trouvant sur la trajectoire du rayon, ayant pour clé; le point d'intersection avec cet élément\&. 
.RE
.PP

.SS "int Level::getHeight () const\fC [inline]\fP"

.PP
Permet d'obtenir la hauteur du niveau\&. 
.PP
\fBRenvoie:\fP
.RS 4
la hauteur du niveau\&. 
.RE
.PP

.PP
Définition à la ligne 283 du fichier level\&.hpp\&.
.PP
Références height, et utilities::round()\&.
.PP
.nf
284 {
285     return std::round(this->height);
286 }
.fi
.SS "const std::vector< \fBLens\fP > & Level::getLenses () const\fC [inline]\fP"

.PP
Retourne l'ensemble des lentilles de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
l'ensemble des lentilles de la carte 
.RE
.PP

.PP
Définition à la ligne 313 du fichier level\&.hpp\&.
.PP
Références lenses\&.
.PP
.nf
314 {
315     return this->lenses;
316 }
.fi
.SS "std::vector< \fBMirror\fP > & Level::getMirrors ()\fC [inline]\fP"

.PP
Retourne l'ensemble des miroirs de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
l'ensemble des miroirs de la carte 
.RE
.PP

.PP
Définition à la ligne 303 du fichier level\&.hpp\&.
.PP
Références mirrors\&.
.PP
.nf
304 {
305     return this->mirrors;
306 }
.fi
.SS "const std::vector< \fBNuke\fP > & Level::getNukes () const\fC [inline]\fP"

.PP
Retourne l'ensemble des bombes de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
l'ensemble des bombes de la carte 
.RE
.PP

.PP
Définition à la ligne 323 du fichier level\&.hpp\&.
.PP
Références nukes\&.
.PP
.nf
324 {
325     return this->nukes;
326 }
.fi
.SS "std::vector< \fBRay\fP > & Level::getRays ()\fC [inline]\fP"

.PP
Retourne l'ensemble des rayons de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
l'ensemble des rayons de la carte 
.RE
.PP

.PP
Définition à la ligne 318 du fichier level\&.hpp\&.
.PP
Références rays\&.
.PP
.nf
319 {
320     return this->rays;
321 }
.fi
.SS "\fBSource\fP & Level::getSource ()\fC [inline]\fP"

.PP
Retourne la source de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
la source de la carte\&. 
.RE
.PP

.PP
Définition à la ligne 288 du fichier level\&.hpp\&.
.PP
Références source\&.
.PP
.nf
289 {
290     return this->source;
291 }
.fi
.SS "const std::vector< \fBWall\fP > & Level::getWalls () const\fC [inline]\fP"

.PP
Retourne l'ensemble des murs de la carte\&. 
.PP
\fBRenvoie:\fP
.RS 4
l'ensemble des murs de la carte 
.RE
.PP

.PP
Définition à la ligne 298 du fichier level\&.hpp\&.
.PP
Références walls\&.
.PP
.nf
299 {
300     return this->walls;
301 }
.fi
.SS "int Level::getWidth () const\fC [inline]\fP"

.PP
Permet d'obtenir la longueur du niveau\&. 
.PP
\fBRenvoie:\fP
.RS 4
La longueur du niveau\&. 
.RE
.PP

.PP
Définition à la ligne 278 du fichier level\&.hpp\&.
.PP
Références utilities::round(), et width\&.
.PP
.nf
279 {
280     return std::round(this->width);
281 }
.fi
.SS "void Level::notifyViews ()"

.PP
Permet de notifier les vues abonnées au niveau que son état a changé\&. 
.SS "void Level::setDestination (const \fBDest\fP &)"

.PP
Change la destination de la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIvalue\fP la destination de la carte 
.RE
.PP

.SS "void Level::setRays (const std::vector< \fBRay\fP > &)"

.PP
Change l'ensemble des rayons de la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIle\fP nouvel ensemble de rayons de la carte 
.RE
.PP

.SS "void Level::setSource (const \fBSource\fP &)"

.PP
Change la source de la carte\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIvalue\fP la nouvelle source 
.RE
.PP

.SS "bool Level::thereIsAnExplodedNuke () const"

.PP
Renseigne si une bombe a explosé\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP Si une bombe a explosé\&. 
.RE
.PP

.SH "Documentation des données membres"
.PP 
.SS "std::vector<\fBCrystal\fP> Level::crystals\fC [private]\fP"

.PP
crystals L'ensemble des cristaux présents dans le niveau\&. 
.PP
Définition à la ligne 65 du fichier level\&.hpp\&.
.PP
Référencé par getCrystals()\&.
.SS "\fBDest\fP Level::dest {\fBPoint\fP{0, 0}, 5}\fC [private]\fP"

.PP
La destination du niveau\&. 
.PP
Définition à la ligne 49 du fichier level\&.hpp\&.
.PP
Référencé par getDestination()\&.
.SS "const double Level::height\fC [private]\fP"

.PP
La hauteur du niveau\&. 
.PP
Définition à la ligne 39 du fichier level\&.hpp\&.
.PP
Référencé par getHeight()\&.
.SS "std::vector<\fBLens\fP> Level::lenses\fC [private]\fP"

.PP
lenses L'ensemble des lentilles présentes dans le niveau\&. 
.PP
Définition à la ligne 70 du fichier level\&.hpp\&.
.PP
Référencé par getLenses()\&.
.SS "std::vector<\fBMirror\fP> Level::mirrors\fC [private]\fP"

.PP
mirrors L'ensemble des miroirs présents dans le niveau\&. 
.PP
Définition à la ligne 60 du fichier level\&.hpp\&.
.PP
Référencé par getMirrors()\&.
.SS "std::vector<\fBNuke\fP> Level::nukes\fC [private]\fP"

.PP
nukes L'ensemble des bombes créées dans le niveau\&. 
.PP
Définition à la ligne 81 du fichier level\&.hpp\&.
.PP
Référencé par getNukes()\&.
.SS "std::vector<\fBRay\fP> Level::rays\fC [private]\fP"

.PP
rays L'ensemble des rayons créés dans le niveau quand la source est allumée\&. 
.PP
Définition à la ligne 76 du fichier level\&.hpp\&.
.PP
Référencé par getRays()\&.
.SS "\fBSource\fP Level::source {\fBPoint\fP{0, 0}, 10, 30\&., 400}\fC [private]\fP"

.PP
La source du niveau\&. 
.PP
Définition à la ligne 44 du fichier level\&.hpp\&.
.PP
Référencé par getSource()\&.
.SS "std::vector<\fBLevelView\fP *> Level::views\fC [private]\fP"

.PP
views L'ensemble des vues qui observent le niveau\&. 
.PP
Définition à la ligne 86 du fichier level\&.hpp\&.
.SS "std::vector<\fBWall\fP> Level::walls\fC [private]\fP"

.PP
L'ensemble des murs du niveau, qu'ils soient ceux qui le délimitent ou des murs supplémentaires ajoutés au niveau même\&. 
.PP
Définition à la ligne 55 du fichier level\&.hpp\&.
.PP
Référencé par getWalls()\&.
.SS "const double Level::width\fC [private]\fP"

.PP
La largeur du niveau\&. 
.PP
Définition à la ligne 34 du fichier level\&.hpp\&.
.PP
Référencé par getWidth()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Starlight à partir du code source\&.
