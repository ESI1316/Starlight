.TH "Ray" 3 "Vendredi 24 Avril 2015" "Starlight" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Ray \- Cette classe modélise les rayons lumineux, concept central du jeu\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <ray\&.hpp>\fP
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBRay\fP (const \fBPoint\fP, double, int=\fBRay::WL_DFT\fP)"
.br
.RI "\fICréer un nouveau rayon\&. \fP"
.ti -1c
.RI "const \fBPoint\fP & \fBgetStart\fP () const "
.br
.RI "\fIRetourne le début du rayon\&. \fP"
.ti -1c
.RI "const \fBPoint\fP & \fBgetEnd\fP () const "
.br
.RI "\fIRetourne la fin du rayon\&. \fP"
.ti -1c
.RI "int \fBgetWaveLength\fP () const "
.br
.RI "\fIRetourne la longueur d'onde du rayon\&. \fP"
.ti -1c
.RI "double \fBgetAlpha\fP () const "
.br
.RI "\fIPermet de connaitre l'angle du rayon\&. \fP"
.ti -1c
.RI "void \fBsetStart\fP (const \fBPoint\fP &)"
.br
.RI "\fIChange la coordonnée du début du rayon\&. \fP"
.ti -1c
.RI "void \fBsetEnd\fP (const \fBPoint\fP &)"
.br
.RI "\fIhange la coordonnée de la fin du rayon\&. \fP"
.ti -1c
.RI "void \fBsetWaveLength\fP (const int)"
.br
.RI "\fIhange la longueur d'onde du rayon\&. \fP"
.ti -1c
.RI "bool \fBisInTrajectory\fP (const \fBPoint\fP &) const "
.br
.RI "\fICette méthode permet de savoir si le point passé en paramètre est bien dans la trajectoire du rayon courant à l'aide de la représentation polaire des points\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBRay\fP &) const "
.br
.RI "\fIPermet de savoir si deux rayons sont les mêmes\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBRay\fP &) const "
.br
.RI "\fIPermet de savoir si deux rayons sont différents\&. \fP"
.in -1c
.SS "Attributs publics statiques"

.in +1c
.ti -1c
.RI "static const int \fBWL_MIN\fP {360}"
.br
.RI "\fILongueur d'onde minimum autorisée pour un rayon lumineux\&. \fP"
.ti -1c
.RI "static const int \fBWL_MAX\fP {830}"
.br
.RI "\fILongueur d'onde maximum autorisée pour un rayon lumineux\&. \fP"
.ti -1c
.RI "static const int \fBWL_DFT\fP {600}"
.br
.RI "\fILongueur d'onde par défaut pour un rayon lumineux\&. \fP"
.in -1c
.SS "Attributs protégés"

.in +1c
.ti -1c
.RI "\fBPoint\fP \fBstart\fP"
.br
.RI "\fILe point de départ du segment de droite représentant le rayon\&. \fP"
.ti -1c
.RI "\fBPoint\fP \fBend\fP"
.br
.RI "\fILe point d'arrivé du segment de droite représentant le rayon\&. \fP"
.ti -1c
.RI "double \fBalpha\fP"
.br
.RI "\fIL'angle de tir du rayon selon le cercle trigonométrique usuel\&. \fP"
.ti -1c
.RI "int \fBwaveLength\fP"
.br
.RI "\fILa longueur d'onde du rayon\&. \fP"
.in -1c
.SH "Description détaillée"
.PP 
Cette classe modélise les rayons lumineux, concept central du jeu\&. 

Un rayon lumineux est un segment de droite muni d'une longueur d'onde\&. 
.PP
Définition à la ligne 15 du fichier ray\&.hpp\&.
.PP
Est dérivée de \fBLine\fP\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "Ray::Ray (const \fBPoint\fP, double, int = \fC\fBRay::WL_DFT\fP\fP)"

.PP
Créer un nouveau rayon\&. 
.SH "Documentation des fonctions membres"
.PP 
.SS "double Ray::getAlpha () const\fC [inline]\fP"

.PP
Permet de connaitre l'angle du rayon\&. 
.PP
\fBRenvoie:\fP
.RS 4
L'angle du rayon courant\&. 
.RE
.PP

.PP
Définition à la ligne 169 du fichier ray\&.hpp\&.
.PP
Références alpha\&.
.PP
.nf
170 {
171     return this->alpha;
172 }
.fi
.SS "const \fBPoint\fP & Ray::getEnd () const\fC [inline]\fP"

.PP
Retourne la fin du rayon\&. 
.PP
\fBRenvoie:\fP
.RS 4
la fin du rayon\&. 
.RE
.PP

.PP
Définition à la ligne 159 du fichier ray\&.hpp\&.
.PP
Références end\&.
.PP
.nf
160 {
161     return this->end;
162 }
.fi
.SS "const \fBPoint\fP & Ray::getStart () const\fC [inline]\fP"

.PP
Retourne le début du rayon\&. 
.PP
\fBRenvoie:\fP
.RS 4
le début du rayon\&. 
.RE
.PP

.PP
Définition à la ligne 154 du fichier ray\&.hpp\&.
.PP
Références start\&.
.PP
.nf
155 {
156     return this->start;
157 }
.fi
.SS "int Ray::getWaveLength () const\fC [inline]\fP"

.PP
Retourne la longueur d'onde du rayon\&. 
.PP
\fBRenvoie:\fP
.RS 4
la longueur d'onde du rayon\&. 
.RE
.PP

.PP
Définition à la ligne 164 du fichier ray\&.hpp\&.
.PP
Références waveLength\&.
.PP
.nf
165 {
166     return this->waveLength;
167 }
.fi
.SS "bool Ray::isInTrajectory (const \fBPoint\fP &) const"

.PP
Cette méthode permet de savoir si le point passé en paramètre est bien dans la trajectoire du rayon courant à l'aide de la représentation polaire des points\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP si le point passé en paramètre est dans la trajectoire\&. 
.RE
.PP

.SS "bool Ray::operator!= (const \fBRay\fP &) const"

.PP
Permet de savoir si deux rayons sont différents\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP Si deux rayons sont différents\&. 
.RE
.PP

.SS "bool Ray::operator== (const \fBRay\fP &) const"

.PP
Permet de savoir si deux rayons sont les mêmes\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP Si deux rayons sont les même\&. 
.RE
.PP

.SS "void Ray::setEnd (const \fBPoint\fP &)"

.PP
hange la coordonnée de la fin du rayon\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIend\fP La nouvelle coordonnée de la fin du rayon\&. 
.RE
.PP

.SS "void Ray::setStart (const \fBPoint\fP &)"

.PP
Change la coordonnée du début du rayon\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIstart\fP La nouvelle coordonnée du début du rayon\&. 
.RE
.PP

.SS "void Ray::setWaveLength (const int)"

.PP
hange la longueur d'onde du rayon\&. Si la longueur d'onde spécifiée est en dehors des limites autorisées, la longueur d'onde vaudra la borne la plus proche\&. La longueur d'onde doit être comprise entre 360 et 830 nm\&.
.PP
\fBParamètres:\fP
.RS 4
\fIwaveLength\fP La nouvelle longueur d'onde du rayon 
.RE
.PP

.SH "Documentation des données membres"
.PP 
.SS "double Ray::alpha\fC [protected]\fP"

.PP
L'angle de tir du rayon selon le cercle trigonométrique usuel\&. 
.PP
Définition à la ligne 33 du fichier ray\&.hpp\&.
.PP
Référencé par getAlpha()\&.
.SS "\fBPoint\fP Ray::end\fC [protected]\fP"

.PP
Le point d'arrivé du segment de droite représentant le rayon\&. 
.PP
Définition à la ligne 28 du fichier ray\&.hpp\&.
.PP
Référencé par getEnd()\&.
.SS "\fBPoint\fP Ray::start\fC [protected]\fP"

.PP
Le point de départ du segment de droite représentant le rayon\&. 
.PP
Définition à la ligne 23 du fichier ray\&.hpp\&.
.PP
Référencé par getStart()\&.
.SS "int Ray::waveLength\fC [protected]\fP"

.PP
La longueur d'onde du rayon\&. 
.PP
Définition à la ligne 38 du fichier ray\&.hpp\&.
.PP
Référencé par getWaveLength()\&.
.SS "const int Ray::WL_DFT {600}\fC [static]\fP"

.PP
Longueur d'onde par défaut pour un rayon lumineux\&. Cette valeur correspond à la longueur d'onde (en nm) de la couleur orangé-rouge du spectre visible de la lumière\&. 
.PP
Définition à la ligne 61 du fichier ray\&.hpp\&.
.SS "const int Ray::WL_MAX {830}\fC [static]\fP"

.PP
Longueur d'onde maximum autorisée pour un rayon lumineux\&. Cette valeur correspond à la longueur d'onde maximum (en nm) du spectre visible de la lumière\&. 
.PP
Définition à la ligne 54 du fichier ray\&.hpp\&.
.SS "const int Ray::WL_MIN {360}\fC [static]\fP"

.PP
Longueur d'onde minimum autorisée pour un rayon lumineux\&. Cette valeur correspond à la longueur d'onde minimum (en nm) du spectre visible de la lumière\&. 
.PP
Définition à la ligne 47 du fichier ray\&.hpp\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Starlight à partir du code source\&.
