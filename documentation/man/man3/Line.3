.TH "Line" 3 "Vendredi 24 Avril 2015" "Starlight" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Line \- Représente une droite sous la forme de son équation complète; $ eq \equiv y = slope \cdot x + indepTerm $\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <line\&.hpp>\fP
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBLine\fP (double, double, double=0)"
.br
.RI "\fIPermet de construire une nouvelle droite initialisée\&. \fP"
.ti -1c
.RI "\fBLine\fP (const \fBPoint\fP &, const \fBPoint\fP &)"
.br
.RI "\fIPermet de construire une droite à partir de deux points\&. \fP"
.ti -1c
.RI "\fBPoint\fP * \fBgetIntersectionPoint\fP (const \fBLine\fP &) const "
.br
.RI "\fIPermet d'obtenir le point d'intersection entre la droite et celle entrée en paramètre\&. \fP"
.ti -1c
.RI "bool \fBincludes\fP (const \fBPoint\fP &) const "
.br
.RI "\fIRenseigne si le point entré en paramètre est inclus dans la droite\&. \fP"
.ti -1c
.RI "double \fBgetSlope\fP () const "
.br
.RI "\fIPermet d'obtenir la pente de la droite\&. \fP"
.ti -1c
.RI "double \fBgetIndepTerm\fP () const "
.br
.RI "\fIPermet d'obtenir le terme indépendant\&. \fP"
.ti -1c
.RI "double \fBgetXValue\fP () const "
.br
.RI "\fIPermet de connaitre la valeur de x, cette valeur est incohérence si la droite n'est pas verticale\&. \fP"
.ti -1c
.RI "bool \fBisVertical\fP () const "
.br
.RI "\fIRenseigne si la droite est verticale\&. \fP"
.ti -1c
.RI "double \fBfindX\fP (const double) const "
.br
.RI "\fIPermet de résoudre l'équation de la droite à partir d'une valeur de y entrée en paramètre\&. \fP"
.ti -1c
.RI "double \fBfindY\fP (const double) const "
.br
.RI "\fIPermet de résoudre l'équation de la droite à partir d'une valeur de x entrée en paramètre\&. \fP"
.ti -1c
.RI "\fBLine\fP & \fBoperator=\fP (const \fBLine\fP &)"
.br
.RI "\fIPermet de copier une ligne\&. \fP"
.ti -1c
.RI "bool \fBoperator==\fP (const \fBLine\fP &) const "
.br
.RI "\fIPermet de savoir si deux lignes sont identiques\&. \fP"
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBLine\fP &) const "
.br
.RI "\fIPermet de savoir si deux lignes sont différentes\&. \fP"
.in -1c
.SS "Attributs protégés"

.in +1c
.ti -1c
.RI "double \fBslope\fP"
.br
.RI "\fIslope Valeur du coefficient angulaire de la droite\&. \fP"
.ti -1c
.RI "double \fBindepTerm\fP"
.br
.RI "\fIindepTerm Contient la valeur du terme indépendant de la droite\&. \fP"
.ti -1c
.RI "double \fBxValue\fP"
.br
.RI "\fIxValue Contient la valeur de x lorsque la droite est verticale\&. \fP"
.in -1c
.SH "Description détaillée"
.PP 
Représente une droite sous la forme de son équation complète; $ eq \equiv y = slope \cdot x + indepTerm $\&. 
.PP
Définition à la ligne 13 du fichier line\&.hpp\&.
.PP
Dérivée par \fBMirror\fP, \fBRay\fP, et \fBWall\fP\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "Line::Line (double, double, double = \fC0\fP)"

.PP
Permet de construire une nouvelle droite initialisée\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIslope\fP Pente de la droite\&. 
.br
\fIindepTerm\fP Terme indépendant de la droite\&. 
.br
\fIxValue\fP Valeur de x si la droite est verticale\&. 
.RE
.PP

.SS "Line::Line (const \fBPoint\fP &, const \fBPoint\fP &)"

.PP
Permet de construire une droite à partir de deux points\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIstart\fP \fBPoint\fP le plus près de l'origine au niveau de l'abscisse\&. 
.br
\fIend\fP \fBPoint\fP le plus éloigné de l'origine au niveau de l'abscisse\&. 
.RE
.PP

.SH "Documentation des fonctions membres"
.PP 
.SS "double Line::findX (const double) const"

.PP
Permet de résoudre l'équation de la droite à partir d'une valeur de y entrée en paramètre\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIy\fP Valeur de y pour résoudre l'équation de la droite\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
le valeur de x après résolution de l'équation de la droite à partir d'une valeur de y entrée en paramètre\&. 
.RE
.PP

.SS "double Line::findY (const double) const"

.PP
Permet de résoudre l'équation de la droite à partir d'une valeur de x entrée en paramètre\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIx\fP Valeur de x pour résoudre l'équation de la droite\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
la valeur de y après résolution de l'équation de la droite à partir d'une valeur de y entrée en paramètre\&. 
.RE
.PP

.SS "double Line::getIndepTerm () const\fC [inline]\fP"

.PP
Permet d'obtenir le terme indépendant\&. 
.PP
\fBRenvoie:\fP
.RS 4
Le terme indépendant\&. 
.RE
.PP

.PP
Définition à la ligne 160 du fichier line\&.hpp\&.
.PP
Références indepTerm\&.
.PP
.nf
161 {
162     return this->indepTerm;
163 }
.fi
.SS "\fBPoint\fP* Line::getIntersectionPoint (const \fBLine\fP &) const"

.PP
Permet d'obtenir le point d'intersection entre la droite et celle entrée en paramètre\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIline\fP Droite dont on désire obtenir le point d'intersection avec la droite courante\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
Un pointeur vers un le point d'intersection entre la droite et celle entrée en paramètre si il existe, un pointeur nul sinon\&. 
.RE
.PP

.SS "double Line::getSlope () const\fC [inline]\fP"

.PP
Permet d'obtenir la pente de la droite\&. 
.PP
\fBRenvoie:\fP
.RS 4
La pente de la droite\&. 
.RE
.PP

.PP
Définition à la ligne 155 du fichier line\&.hpp\&.
.PP
Références slope\&.
.PP
.nf
156 {
157     return this->slope;
158 }
.fi
.SS "double Line::getXValue () const\fC [inline]\fP"

.PP
Permet de connaitre la valeur de x, cette valeur est incohérence si la droite n'est pas verticale\&. 
.PP
\fBRenvoie:\fP
.RS 4
La valeur de x si la droite est verticale\&. 
.RE
.PP

.PP
Définition à la ligne 165 du fichier line\&.hpp\&.
.PP
Références xValue\&.
.PP
.nf
166 {
167     return this->xValue;
168 }
.fi
.SS "bool Line::includes (const \fBPoint\fP &) const"

.PP
Renseigne si le point entré en paramètre est inclus dans la droite\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIpoint\fP \fBPoint\fP dont on désire savoir s'il est inclus dans la droite\&.
.RE
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP si le point entré en paramètre est inclus dans la droite\&. 
.RE
.PP

.SS "bool Line::isVertical () const"

.PP
Renseigne si la droite est verticale\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP Si la droite est verticale\&. 
.RE
.PP

.SS "bool Line::operator!= (const \fBLine\fP &) const"

.PP
Permet de savoir si deux lignes sont différentes\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP Si deux lignes sont différentes\&. 
.RE
.PP

.SS "\fBLine\fP& Line::operator= (const \fBLine\fP &)"

.PP
Permet de copier une ligne\&. 
.PP
\fBRenvoie:\fP
.RS 4
La ligne courante représentant la ligne passée en paramètre\&. 
.RE
.PP

.SS "bool Line::operator== (const \fBLine\fP &) const"

.PP
Permet de savoir si deux lignes sont identiques\&. 
.PP
\fBRenvoie:\fP
.RS 4
\fCtrue\fP Si deux lignes sont identiques\&. 
.RE
.PP

.SH "Documentation des données membres"
.PP 
.SS "double Line::indepTerm\fC [protected]\fP"

.PP
indepTerm Contient la valeur du terme indépendant de la droite\&. 
.PP
Définition à la ligne 26 du fichier line\&.hpp\&.
.PP
Référencé par getIndepTerm()\&.
.SS "double Line::slope\fC [protected]\fP"

.PP
slope Valeur du coefficient angulaire de la droite\&. 
.PP
Définition à la ligne 21 du fichier line\&.hpp\&.
.PP
Référencé par getSlope()\&.
.SS "double Line::xValue\fC [protected]\fP"

.PP
xValue Contient la valeur de x lorsque la droite est verticale\&. 
.PP
Définition à la ligne 31 du fichier line\&.hpp\&.
.PP
Référencé par getXValue()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour Starlight à partir du code source\&.
